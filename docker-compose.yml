version: "3.8"
networks:
  spark_network:

x-check-ports: &check-ports ./bin/check-ports:/bin/check-ports
x-highlight: &highlight ./bin/hl:/bin/hl

x-service-template: &template
  restart: on-failure
  networks:
    - spark_network
  healthcheck: &hc
    interval: 5s
    timeout: 3s
    start_period: 10s
    retries: 20
  volumes:
    - *check-ports
    - *highlight

x-public-key: &pub >
  ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILArDnLYVp+/JkcrJKHX5XDpFj2MdA6NmV09vh7DmVrD spark-exercises

x-private-key: &private |+
  -----BEGIN OPENSSH PRIVATE KEY-----
  b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
  QyNTUxOQAAACCwKw5y2FafvyZHKySh1+Vw6RY9jHQOjZldPb4ew5lawwAAAJggO3ZdIDt2
  XQAAAAtzc2gtZWQyNTUxOQAAACCwKw5y2FafvyZHKySh1+Vw6RY9jHQOjZldPb4ew5laww
  AAAEA6oPfTO+faTshF1LXPJNKihyWNqL5QQejwBnFQ8UK4o7ArDnLYVp+/JkcrJKHX5XDp
  Fj2MdA6NmV09vh7DmVrDAAAAD3NwYXJrLWV4ZXJjaXNlcwECAwQFBg==
  -----END OPENSSH PRIVATE KEY-----

services:
  pyspark:
    <<: *template
    image: jupyter/pyspark-notebook:spark-3.5.0
    hostname: &name pyspark
    container_name: *name
    command: /usr/local/bin/entrypoint
    healthcheck:
      <<: *hc
      test: bash /bin/check-ports 8888
    depends_on:
      dind:
        condition: service_healthy
    ports:
      - "8888:8888"
      - "4040:4040"
    volumes:
      - *check-ports
      - *highlight
      - ./work/data:/home/jovyan/work/data
      - ./work/work.ipynb:/home/jovyan/work/work.ipynb
      - ./conf:/tmp/hadoop/conf
      - ./bin/pyspark-entrypoint:/usr/local/bin/entrypoint
      - ./bin/pyspark.bash_aliases:/home/jovyan/.bash_aliases
    environment:
      NOTEBOOK_ARGS: --NotebookApp.token='' --NotebookApp.password=''
      HADOOP_CONF_DIR: /tmp/hadoop/conf
      YARN_CONF_DIR: /tmp/hadoop/conf
      SPARK_LOG_DIR: /tmp/spark-logs
      PRIVATE_KEY: *private
      DIND_HOST: dind
      NAMENODE_HOST: hadoop
      RESOURCEMANAGER_HOST: hadoop

  hadoop:
    <<: *template
    image: neshkeev/hadoop
    hostname: &name hadoop
    container_name: *name
    healthcheck:
      <<: *hc
      test: bash /bin/check-ports 8042 8088 9000 9870 9864
    ports:
      - "8042:8042"
      - "8088:8088"
      - "9870:9870"
      - "9864:9864"
    volumes:
      - *highlight
      - ./conf/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      - ./conf/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      - ./conf/mapred-site.xml:/opt/hadoop/etc/hadoop/mapred-site.xml
      - ./conf/yarn-site.xml:/opt/hadoop/etc/hadoop/yarn-site.xml
      - ./bin/propagate-envs:/usr/bin/before_start
    environment:
      HADOOP_DATANODE_HOST: ${DATANODE_HOST:-localhost}
      HADOOP_NODEMANAGER_HOST: ${NODEMANAGER_HOST:-localhost}

  dind:
    <<: *template
    build:
      context: .
      dockerfile: local/Dockerfile_dind
    hostname: &name dind
    container_name: *name
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 2222
    privileged: true
    volumes:
      - *check-ports
      - *highlight
      - .:/root/${CURRENT_DIR_NAME:-spark-exercises}
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CURRENT_DIR_NAME: ${CURRENT_DIR_NAME:-spark-exercises}
      AUTHORIZED_KEYS: *pub

  kafka:
    <<: *template
    image: confluentinc/cp-kafka:7.4.0
    hostname: &name kafka
    container_name: *name
    healthcheck:
      <<: *hc
      test: /bin/check-ports 9092 19092
    profiles: [ "kafka" ]
    environment: &controller_env
      CLUSTER_ID: JS-9P8KdQGG_lCVXikxM5w
      KAFKA_NODE_ID: 1

      KAFKA_PROCESS_ROLES: >
        controller,
        broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:19092

      KAFKA_LISTENERS: &listeners BROKER://kafka:9092, CONTROLLER://kafka:19092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >
        BROKER:PLAINTEXT,
        CONTROLLER:PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs

  redpanda:
    <<: *template
    image: docker.redpanda.com/redpandadata/console:v2.2.4
    hostname: &name redpanda
    container_name: *name
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      <<: *hc
      test: sh /bin/check-ports 8080
    profiles: [ "kafka" ]
    environment:
      KAFKA_BROKERS: kafka:9092

  postgres:
    <<: *template
    image: postgres:14.1
    container_name: &name postgres
    hostname: *name
    healthcheck:
      <<: *hc
      test: /bin/check-ports 5432
    volumes:
      - *check-ports
      - ./db:/docker-entrypoint-initdb.d/
    profiles: [ "db" ]
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  hive:
    <<: *template
    image: apachehudi/hudi-hadoop_3.1.0-hive_3.1.2-sparkworker_3.2.1
    container_name: &name hive
    hostname: *name
    entrypoint: bash /bin/entrypoint
    depends_on:
      hadoop:
        condition: service_healthy
    healthcheck:
      <<: *hc
      test: /bin/check-ports 9083
    volumes:
      - *check-ports
      - ./bin/hive-entrypoint:/bin/entrypoint
    environment:
      CORE_CONF_fs_defaultFS: hdfs://hadoop:9000

  presto:
    <<: *template
    image: ahanaio/prestodb-sandbox
    container_name: &name presto
    hostname: *name
    depends_on:
      hive:
        condition: service_healthy
    healthcheck:
      <<: *hc
      test: bash /bin/check-ports 8080
    ports:
      - "8080:8080"
    volumes:
      - *check-ports
      - ./conf/presto.properties:/opt/presto-server/etc/catalog/delta.properties
      - ./conf/presto-authenticator.properties:/opt/presto-server/etc/password-authenticator.properties
      - ./conf/presto-passwords.conf:/tmp/passwords

  superset:
    <<: *template
    image: apachesuperset.docker.scarf.sh/apache/superset
    container_name: &name superset
    hostname: *name
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      <<: *hc
      test: bash /bin/check-ports 8088
    ports:
      - "18088:8088"
    profiles: [ "superset" ]
    env_file: conf/superset.env
